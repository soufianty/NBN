import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Brain, Wand2, Languages, BookOpen, Zap, Type, \n  FileText, Briefcase, GraduationCap, Calculator,\n  MessageSquare, CheckCircle, Loader2\n} from \"lucide-react\";\n\ninterface AIAssistantProps {\n  onContentGenerated: (content: string) => void;\n  selectedText?: string;\n}\n\ninterface AITemplate {\n  id: string;\n  name: string;\n  prompt: string;\n  icon: React.ReactNode;\n  category: string;\n}\n\nconst aiTemplates: AITemplate[] = [\n  {\n    id: 'business-email',\n    name: 'Business Email',\n    prompt: 'Write a professional business email',\n    icon: <Briefcase className=\"w-4 h-4\" />,\n    category: 'business'\n  },\n  {\n    id: 'cover-letter',\n    name: 'Cover Letter',\n    prompt: 'Create a compelling cover letter',\n    icon: <FileText className=\"w-4 h-4\" />,\n    category: 'personal'\n  },\n  {\n    id: 'meeting-summary',\n    name: 'Meeting Summary',\n    prompt: 'Summarize meeting notes and action items',\n    icon: <MessageSquare className=\"w-4 h-4\" />,\n    category: 'business'\n  },\n  {\n    id: 'project-proposal',\n    name: 'Project Proposal',\n    prompt: 'Draft a detailed project proposal',\n    icon: <CheckCircle className=\"w-4 h-4\" />,\n    category: 'business'\n  },\n  {\n    id: 'academic-essay',\n    name: 'Academic Essay',\n    prompt: 'Write an academic essay with proper structure',\n    icon: <GraduationCap className=\"w-4 h-4\" />,\n    category: 'academic'\n  }\n];\n\nconst aiActions = [\n  {\n    id: 'improve',\n    name: 'improve_text',\n    icon: <Zap className=\"w-4 h-4\" />,\n    description: 'Enhance clarity and readability'\n  },\n  {\n    id: 'translate',\n    name: 'translate_text',\n    icon: <Languages className=\"w-4 h-4\" />,\n    description: 'Translate to another language'\n  },\n  {\n    id: 'summarize',\n    name: 'summarize',\n    icon: <BookOpen className=\"w-4 h-4\" />,\n    description: 'Create a concise summary'\n  },\n  {\n    id: 'expand',\n    name: 'expand_text',\n    icon: <Type className=\"w-4 h-4\" />,\n    description: 'Add more detail and context'\n  }\n];\n\nexport default function AIAssistant({ onContentGenerated, selectedText }: AIAssistantProps) {\n  const { t } = useTranslation();\n  const [prompt, setPrompt] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [targetLanguage, setTargetLanguage] = useState('en');\n  const [tone, setTone] = useState('professional');\n\n  const generateContent = async (promptText: string, action?: string) => {\n    setIsGenerating(true);\n    \n    // Simulate AI content generation with more realistic responses\n    setTimeout(() => {\n      let generatedContent = '';\n      \n      switch (action) {\n        case 'improve':\n          generatedContent = `<div class=\"ai-improved\">\n            <h3>Improved Text</h3>\n            <p>Here is an enhanced version of your text with improved clarity, structure, and readability. The content has been refined to better communicate your message while maintaining your original intent.</p>\n            ${selectedText ? `<blockquote style=\"border-left: 3px solid #007acc; padding-left: 15px; margin: 15px 0; font-style: italic;\">${selectedText}</blockquote>` : ''}\n          </div>`;\n          break;\n          \n        case 'translate':\n          generatedContent = `<div class=\"ai-translation\">\n            <h3>Translation (${targetLanguage.toUpperCase()})</h3>\n            <p>This is a translation of your content to ${targetLanguage}. The translation maintains the original meaning while adapting to the target language's cultural and linguistic nuances.</p>\n            ${selectedText ? `<blockquote style=\"border-left: 3px solid #28a745; padding-left: 15px; margin: 15px 0;\">[Translated version of: ${selectedText}]</blockquote>` : ''}\n          </div>`;\n          break;\n          \n        case 'summarize':\n          generatedContent = `<div class=\"ai-summary\">\n            <h3>Summary</h3>\n            <p><strong>Key Points:</strong></p>\n            <ul>\n              <li>Main idea extracted from the original content</li>\n              <li>Supporting arguments and evidence</li>\n              <li>Conclusions and recommendations</li>\n            </ul>\n            ${selectedText ? `<p><em>Summary based on: \"${selectedText.substring(0, 100)}...\"</em></p>` : ''}\n          </div>`;\n          break;\n          \n        case 'expand':\n          generatedContent = `<div class=\"ai-expansion\">\n            <h3>Expanded Content</h3>\n            <p>This expanded version provides additional context, examples, and detailed explanations to enhance your original content. The expansion maintains coherence while adding valuable depth.</p>\n            ${selectedText ? `<p><strong>Original:</strong> ${selectedText}</p>` : ''}\n            <p><strong>Expanded:</strong> [Detailed expansion with examples, context, and supporting information that elaborates on the original content while maintaining focus and relevance.]</p>\n          </div>`;\n          break;\n          \n        default:\n          // Generate content based on template or custom prompt\n          if (selectedTemplate) {\n            const template = aiTemplates.find(t => t.id === selectedTemplate);\n            generatedContent = generateTemplateContent(template);\n          } else {\n            generatedContent = `<div class=\"ai-generated\">\n              <h3>AI Generated Content</h3>\n              <p><strong>Request:</strong> ${promptText}</p>\n              <p><strong>Tone:</strong> ${tone}</p>\n              <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #eee;\" />\n              <p>Based on your request, here is professionally crafted content that addresses your needs. This content has been generated with attention to structure, clarity, and purpose.</p>\n              <p>The content follows best practices for ${tone} communication and can be further customized to meet your specific requirements.</p>\n            </div>`;\n          }\n      }\n      \n      onContentGenerated(generatedContent);\n      setIsGenerating(false);\n      setPrompt('');\n      setSelectedTemplate(null);\n    }, 1500 + Math.random() * 2000); // Realistic generation time\n  };\n\n  const generateTemplateContent = (template: AITemplate | undefined) => {\n    if (!template) return '';\n    \n    const templateContent = {\n      'business-email': `<div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\n        <p><strong>Subject:</strong> [Your Email Subject]</p>\n        <br/>\n        <p>Dear [Recipient Name],</p>\n        \n        <p>I hope this email finds you well. I am writing to [state your purpose clearly and concisely].</p>\n        \n        <p>[Main body paragraph with specific details, context, and any necessary information. Keep it professional and to the point.]</p>\n        \n        <p>[If applicable, include any action items, deadlines, or next steps here.]</p>\n        \n        <p>Thank you for your time and consideration. Please let me know if you need any additional information.</p>\n        \n        <p>Best regards,<br/>\n        [Your Name]<br/>\n        [Your Title]<br/>\n        [Your Contact Information]</p>\n      </div>`,\n      \n      'cover-letter': `<div style=\"font-family: Arial, sans-serif; line-height: 1.6; margin: 40px;\">\n        <div style=\"text-align: right; margin-bottom: 30px;\">\n          <p>[Your Name]<br/>\n          [Your Address]<br/>\n          [Your Email] | [Your Phone]</p>\n          <p>[Date]</p>\n        </div>\n        \n        <div style=\"margin-bottom: 30px;\">\n          <p>[Hiring Manager Name]<br/>\n          [Company Name]<br/>\n          [Company Address]</p>\n        </div>\n        \n        <p>Dear Hiring Manager,</p>\n        \n        <p>I am writing to express my strong interest in the [Position Title] role at [Company Name]. With my background in [relevant field/experience], I am excited about the opportunity to contribute to your team.</p>\n        \n        <p>[Paragraph highlighting your most relevant qualifications, achievements, and skills that align with the job requirements.]</p>\n        \n        <p>[Paragraph demonstrating your knowledge of the company and explaining why you want to work there specifically.]</p>\n        \n        <p>I would welcome the opportunity to discuss how my experience and enthusiasm can benefit [Company Name]. Thank you for considering my application.</p>\n        \n        <p>Sincerely,<br/>\n        [Your Name]</p>\n      </div>`,\n      \n      'meeting-summary': `<div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\n        <h2 style=\"color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px;\">Meeting Summary</h2>\n        \n        <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;\">\n          <p><strong>Date:</strong> [Meeting Date]</p>\n          <p><strong>Time:</strong> [Meeting Time]</p>\n          <p><strong>Attendees:</strong> [List of Attendees]</p>\n          <p><strong>Meeting Objective:</strong> [Purpose of the meeting]</p>\n        </div>\n        \n        <h3 style=\"color: #333;\">Key Discussion Points</h3>\n        <ul>\n          <li>[Main topic 1 - brief summary of discussion]</li>\n          <li>[Main topic 2 - brief summary of discussion]</li>\n          <li>[Main topic 3 - brief summary of discussion]</li>\n        </ul>\n        \n        <h3 style=\"color: #333;\">Decisions Made</h3>\n        <ol>\n          <li>[Decision 1 with context]</li>\n          <li>[Decision 2 with context]</li>\n        </ol>\n        \n        <h3 style=\"color: #333;\">Action Items</h3>\n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 10px;\">\n          <thead>\n            <tr style=\"background-color: #007acc; color: white;\">\n              <th style=\"padding: 10px; border: 1px solid #ddd;\">Task</th>\n              <th style=\"padding: 10px; border: 1px solid #ddd;\">Assigned To</th>\n              <th style=\"padding: 10px; border: 1px solid #ddd;\">Due Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Action item 1]</td>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Person responsible]</td>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Due date]</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Action item 2]</td>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Person responsible]</td>\n              <td style=\"padding: 10px; border: 1px solid #ddd;\">[Due date]</td>\n            </tr>\n          </tbody>\n        </table>\n        \n        <h3 style=\"color: #333;\">Next Meeting</h3>\n        <p><strong>Date:</strong> [Next meeting date]<br/>\n        <strong>Agenda:</strong> [Brief outline of next meeting topics]</p>\n      </div>`\n    };\n    \n    return templateContent[template.id as keyof typeof templateContent] || '';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            {t('ai_assistant')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Quick Templates */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Quick Templates</label>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {aiTemplates.map((template) => (\n                <Button\n                  key={template.id}\n                  variant={selectedTemplate === template.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  className=\"justify-start h-auto p-3\"\n                  onClick={() => {\n                    setSelectedTemplate(template.id);\n                    setPrompt(template.prompt);\n                  }}\n                >\n                  <div className=\"flex items-center gap-2 w-full\">\n                    {template.icon}\n                    <div className=\"text-left\">\n                      <div className=\"font-medium\">{template.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {template.prompt}\n                      </div>\n                    </div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </div>\n          \n          {/* Custom Prompt */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Custom Request</label>\n            <Textarea\n              placeholder={t('ai_prompt')}\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              rows={3}\n              className=\"resize-none\"\n            />\n          </div>\n          \n          {/* Settings */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Tone</label>\n              <Select value={tone} onValueChange={setTone}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"professional\">Professional</SelectItem>\n                  <SelectItem value=\"casual\">Casual</SelectItem>\n                  <SelectItem value=\"formal\">Formal</SelectItem>\n                  <SelectItem value=\"friendly\">Friendly</SelectItem>\n                  <SelectItem value=\"persuasive\">Persuasive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Language</label>\n              <Select value={targetLanguage} onValueChange={setTargetLanguage}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ar\">العربية</SelectItem>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"fr\">Français</SelectItem>\n                  <SelectItem value=\"es\">Español</SelectItem>\n                  <SelectItem value=\"de\">Deutsch</SelectItem>\n                  <SelectItem value=\"zh\">中文</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          {/* Generate Button */}\n          <Button \n            onClick={() => generateContent(prompt)} \n            disabled={isGenerating || (!prompt.trim() && !selectedTemplate)}\n            className=\"w-full\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                {t('ai_generating')}...\n              </>\n            ) : (\n              <>\n                <Wand2 className=\"w-4 h-4 mr-2\" />\n                {t('generate_content')}\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n      \n      {/* Text Actions */}\n      {selectedText && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Text Actions</CardTitle>\n            <div className=\"text-xs text-muted-foreground\">\n              Selected: \"{selectedText.substring(0, 50)}...\"\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {aiActions.map((action) => (\n                <Button\n                  key={action.id}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-auto p-3 flex-col items-start\"\n                  onClick={() => generateContent(selectedText, action.id)}\n                  disabled={isGenerating}\n                >\n                  <div className=\"flex items-center gap-2 w-full\">\n                    {action.icon}\n                    <span className=\"font-medium\">{t(action.name)}</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground mt-1\">\n                    {action.description}\n                  </span>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}