import { useEffect } from 'react';\n\ninterface KeyboardShortcuts {\n  onSave?: () => void;\n  onExport?: () => void;\n  onBold?: () => void;\n  onItalic?: () => void;\n  onUnderline?: () => void;\n  onUndo?: () => void;\n  onRedo?: () => void;\n}\n\nexport function useKeyboardShortcuts(shortcuts: KeyboardShortcuts) {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Check for modifier keys (Ctrl/Cmd)\n      const isCtrlOrCmd = event.ctrlKey || event.metaKey;\n      \n      if (isCtrlOrCmd) {\n        switch (event.key.toLowerCase()) {\n          case 's':\n            event.preventDefault();\n            shortcuts.onSave?.();\n            break;\n          case 'e':\n            event.preventDefault();\n            shortcuts.onExport?.();\n            break;\n          case 'b':\n            event.preventDefault();\n            shortcuts.onBold?.();\n            break;\n          case 'i':\n            event.preventDefault();\n            shortcuts.onItalic?.();\n            break;\n          case 'u':\n            event.preventDefault();\n            shortcuts.onUnderline?.();\n            break;\n          case 'z':\n            if (event.shiftKey) {\n              event.preventDefault();\n              shortcuts.onRedo?.();\n            } else {\n              event.preventDefault();\n              shortcuts.onUndo?.();\n            }\n            break;\n          case 'y':\n            event.preventDefault();\n            shortcuts.onRedo?.();\n            break;\n        }\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [shortcuts]);\n}